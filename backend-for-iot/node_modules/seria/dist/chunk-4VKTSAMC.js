// src/trackingPromise.ts
var TRACKING_PROMISE_SYMBOL = Symbol("TRACKING_PROMISE_SYMBOL");
function trackPromise(id, promise) {
  const tracking = Object.assign(promise, {
    id,
    status: { state: "pending" },
    [TRACKING_PROMISE_SYMBOL]: true
  });
  tracking.then((data) => {
    tracking.status = {
      state: "resolved",
      data
    };
  }).catch((error) => {
    tracking.status = {
      state: "rejected",
      error
    };
  });
  return tracking;
}
function isTrackingPromise(value) {
  return value != null && typeof value.id === "number" && typeof value.status === "object" && value[TRACKING_PROMISE_SYMBOL] === true && value instanceof Promise;
}
async function forEachPromise(promises, callbacks) {
  const { onResolved, onRejected } = callbacks;
  const pendingPromises = [];
  for (const p of promises) {
    let resolving = p.then((data) => {
      onResolved({ id: p.id, data });
    });
    if (onRejected) {
      resolving = resolving.catch((error) => {
        onRejected({ id: p.id, error });
      });
    }
    pendingPromises.push(resolving);
  }
  await Promise.all(pendingPromises);
}

export {
  trackPromise,
  isTrackingPromise,
  forEachPromise
};
//# sourceMappingURL=chunk-4VKTSAMC.js.map