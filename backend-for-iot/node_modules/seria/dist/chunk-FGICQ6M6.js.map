{"version":3,"sources":["../src/tag.ts"],"sourcesContent":["\r\n// We are using a format similar to the used in the react source code,\r\n// the problem is that using more than 1 character may introduce unintended collisions if handle incorrectly,\r\n// for example: $NaN and $N could case an error if handle incorrectly during deserialization.\r\n// We may need to keep only 1 character in the future to be consistent and prevent collisions easily,\r\n// or  get a better mechanism to handle collitions on the first character.\r\n\r\nexport const enum Tag {\r\n  String = \"$\",\r\n  Date = \"D\",\r\n  BigInt = \"n\",\r\n  FormData = \"K\",\r\n  Promise = \"@\",\r\n  Symbol = \"S\",\r\n  Set = \"W\",\r\n  Map = \"Q\",\r\n  Undefined = \"undefined\",\r\n  Infinity_ = \"Infinity\",\r\n  NegativeInfinity = \"-Infinity\",\r\n  NegativeZero = \"-0\",\r\n  NaN_ = \"NaN\",\r\n\r\n  // Others\r\n  File = \"k\",\r\n  AsyncIterator = \"#\",\r\n\r\n  // Buffers\r\n  ArrayBuffer = \"A\",\r\n  Int8Array = \"C\",\r\n  Uint8Array = \"c\",\r\n  Uint8ClampedArray = \"U\",\r\n  Int16Array = \"P\",\r\n  Uint16Array = \"p\",\r\n  Int32Array = \"L\",\r\n  Uint32Array = \"l\",\r\n  Float32Array = \"F\",\r\n  Float64Array = \"d\",\r\n  BigInt64Array = \"N\",\r\n  BigUint64Array = \"m\",\r\n  DataView = \"V\",\r\n}\r\n\r\nconst TYPED_ARRAY_TAGS = [\r\n  Tag.ArrayBuffer,\r\n  Tag.Int8Array,\r\n  Tag.Uint8Array,\r\n  Tag.Uint8ClampedArray,\r\n  Tag.Int16Array,\r\n  Tag.Uint16Array,\r\n  Tag.Int32Array,\r\n  Tag.Uint32Array,\r\n  Tag.Float32Array,\r\n  Tag.Float64Array,\r\n  Tag.BigInt64Array,\r\n  Tag.BigUint64Array,\r\n  Tag.DataView,\r\n];\r\n\r\nexport function isTypedArrayTag(tag: string): tag is Tag {\r\n  return TYPED_ARRAY_TAGS.includes(tag as Tag);\r\n}\r\n"],"mappings":";AAOO,IAAW,MAAX,kBAAWA,SAAX;AACL,EAAAA,KAAA,YAAS;AACT,EAAAA,KAAA,UAAO;AACP,EAAAA,KAAA,YAAS;AACT,EAAAA,KAAA,cAAW;AACX,EAAAA,KAAA,aAAU;AACV,EAAAA,KAAA,YAAS;AACT,EAAAA,KAAA,SAAM;AACN,EAAAA,KAAA,SAAM;AACN,EAAAA,KAAA,eAAY;AACZ,EAAAA,KAAA,eAAY;AACZ,EAAAA,KAAA,sBAAmB;AACnB,EAAAA,KAAA,kBAAe;AACf,EAAAA,KAAA,UAAO;AAGP,EAAAA,KAAA,UAAO;AACP,EAAAA,KAAA,mBAAgB;AAGhB,EAAAA,KAAA,iBAAc;AACd,EAAAA,KAAA,eAAY;AACZ,EAAAA,KAAA,gBAAa;AACb,EAAAA,KAAA,uBAAoB;AACpB,EAAAA,KAAA,gBAAa;AACb,EAAAA,KAAA,iBAAc;AACd,EAAAA,KAAA,gBAAa;AACb,EAAAA,KAAA,iBAAc;AACd,EAAAA,KAAA,kBAAe;AACf,EAAAA,KAAA,kBAAe;AACf,EAAAA,KAAA,mBAAgB;AAChB,EAAAA,KAAA,oBAAiB;AACjB,EAAAA,KAAA,cAAW;AAhCK,SAAAA;AAAA,GAAA;AAmClB,IAAM,mBAAmB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,SAAS,gBAAgB,KAAyB;AACvD,SAAO,iBAAiB,SAAS,GAAU;AAC7C;","names":["Tag"]}