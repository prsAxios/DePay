"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/trackingPromise.ts
var trackingPromise_exports = {};
__export(trackingPromise_exports, {
  forEachPromise: () => forEachPromise,
  isTrackingPromise: () => isTrackingPromise,
  trackPromise: () => trackPromise
});
module.exports = __toCommonJS(trackingPromise_exports);
var TRACKING_PROMISE_SYMBOL = Symbol("TRACKING_PROMISE_SYMBOL");
function trackPromise(id, promise) {
  const tracking = Object.assign(promise, {
    id,
    status: { state: "pending" },
    [TRACKING_PROMISE_SYMBOL]: true
  });
  tracking.then((data) => {
    tracking.status = {
      state: "resolved",
      data
    };
  }).catch((error) => {
    tracking.status = {
      state: "rejected",
      error
    };
  });
  return tracking;
}
function isTrackingPromise(value) {
  return value != null && typeof value.id === "number" && typeof value.status === "object" && value[TRACKING_PROMISE_SYMBOL] === true && value instanceof Promise;
}
async function forEachPromise(promises, callbacks) {
  const { onResolved, onRejected } = callbacks;
  const pendingPromises = [];
  for (const p of promises) {
    let resolving = p.then((data) => {
      onResolved({ id: p.id, data });
    });
    if (onRejected) {
      resolving = resolving.catch((error) => {
        onRejected({ id: p.id, error });
      });
    }
    pendingPromises.push(resolving);
  }
  await Promise.all(pendingPromises);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  forEachPromise,
  isTrackingPromise,
  trackPromise
});
//# sourceMappingURL=trackingPromise.cjs.map