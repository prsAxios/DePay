"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/json/stringify.ts
var stringify_exports = {};
__export(stringify_exports, {
  internal_serialize: () => internal_serialize,
  serializeTagValue: () => serializeTagValue,
  stringify: () => stringify,
  stringifyAsync: () => stringifyAsync,
  stringifyToStream: () => stringifyToStream
});
module.exports = __toCommonJS(stringify_exports);

// src/trackingPromise.ts
var TRACKING_PROMISE_SYMBOL = Symbol("TRACKING_PROMISE_SYMBOL");
function trackPromise(id, promise) {
  const tracking = Object.assign(promise, {
    id,
    status: { state: "pending" },
    [TRACKING_PROMISE_SYMBOL]: true
  });
  tracking.then((data) => {
    tracking.status = {
      state: "resolved",
      data
    };
  }).catch((error) => {
    tracking.status = {
      state: "rejected",
      error
    };
  });
  return tracking;
}
async function forEachPromise(promises, callbacks) {
  const { onResolved, onRejected } = callbacks;
  const pendingPromises = [];
  for (const p of promises) {
    let resolving = p.then((data) => {
      onResolved({ id: p.id, data });
    });
    if (onRejected) {
      resolving = resolving.catch((error) => {
        onRejected({ id: p.id, error });
      });
    }
    pendingPromises.push(resolving);
  }
  await Promise.all(pendingPromises);
}

// src/utils.ts
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}
function bufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}

// src/trackingAsyncIterable.ts
var TRACKING_ASYNC_ITERABLE_SYMBOL = Symbol("TRACKING_ASYNC_ITERABLE_SYMBOL");
function trackAsyncIterable(id, asyncIterator, context) {
  return Object.assign(asyncIterator, {
    id,
    context,
    [TRACKING_ASYNC_ITERABLE_SYMBOL]: true
  });
}

// src/json/stringify.ts
function stringify(value, replacer, space) {
  const { output, pendingPromises, pendingIterators } = internal_serialize(
    value,
    {
      replacer,
      space
    }
  );
  if (pendingPromises.length > 0) {
    throw new Error("Serialiation result have pending promises");
  }
  if (pendingIterators.length > 0) {
    throw new Error("Serialiation result have pending async iterators");
  }
  return JSON.stringify(output, null, space);
}
async function stringifyAsync(value, replacer, space) {
  const result = internal_serialize(value, {
    replacer,
    space
  });
  await Promise.all(result.pendingPromises);
  const iteratorPromises = result.pendingIterators.map(async (gen) => {
    for await (const _ of gen) {
    }
  });
  await Promise.all(iteratorPromises);
  return JSON.stringify(result.output, null, space);
}
function stringifyToStream(value, replacer, space) {
  const result = internal_serialize(value, {
    replacer,
    space
  });
  return new ReadableStream({
    async start(controller) {
      const json = JSON.stringify(result.output, null, space);
      const pendingIteratorsMap = /* @__PURE__ */ new Map();
      controller.enqueue(`${json}

`);
      await forEachPromise(result.pendingPromises, {
        async onResolved({ data, id }) {
          const resolved = trackPromise(id, Promise.resolve(data));
          const serializedPromise = internal_serialize(resolved, {
            replacer,
            initialID: id
          });
          await Promise.all(serializedPromise.pendingPromises);
          const promiseJson = JSON.stringify(
            serializedPromise.output,
            null,
            space
          );
          if (serializedPromise.pendingIterators.length > 0) {
            for (const gen of serializedPromise.pendingIterators) {
              pendingIteratorsMap.set(gen.id, gen);
            }
          }
          controller.enqueue(`${promiseJson}

`);
        }
      });
      if (result.pendingIterators.length > 0) {
        for (const gen of result.pendingIterators) {
          pendingIteratorsMap.set(gen.id, gen);
        }
      }
      const pendingIterators = Array.from(pendingIteratorsMap.values());
      const resolveIterators = pendingIterators.map(async (iter) => {
        for await (const item of iter) {
          const asyncIteratorOutput = unsafe_writeOutput(
            "#" /* AsyncIterator */,
            iter.id,
            [item]
          );
          const genJson = JSON.stringify(asyncIteratorOutput, null, space);
          controller.enqueue(`${genJson}

`);
        }
      });
      await Promise.all(resolveIterators);
      controller.close();
    }
  });
}
function internal_serialize(value, opts) {
  const { replacer, space, initialID = 1 } = opts;
  const writtenValues = /* @__PURE__ */ new Map();
  const pendingPromisesMap = /* @__PURE__ */ new Map();
  const pendingIteratorsMap = /* @__PURE__ */ new Map();
  const output = [];
  let id = initialID;
  const nextId = () => {
    return id++;
  };
  const checkWrittenValues = () => {
    for (const [id2, value2] of writtenValues) {
      output[id2] = value2;
    }
  };
  const context = {
    output,
    writtenValues,
    pendingPromisesMap,
    pendingIteratorsMap,
    space,
    nextId,
    encodeValue,
    checkWrittenValues
  };
  function encodeValue(input) {
    if (replacer) {
      const serialized = replacer(input, context);
      if (serialized !== void 0) {
        return serialized;
      }
    }
    switch (typeof input) {
      case "string":
        return `$$${input}`;
      case "boolean":
        return input;
      case "number":
        return serializeNumber(input);
      case "symbol":
        return serializeSymbol(input);
      case "undefined":
        return "$undefined";
      case "bigint":
        return serializeBigInt(input);
      case "object": {
        if (input === null) {
          return null;
        } else if (input instanceof Date) {
          return serializeDate(input);
        } else if (input instanceof Map) {
          return serializeMap(input, context);
        } else if (input instanceof Set) {
          return serializeSet(input, context);
        } else if (Array.isArray(input)) {
          return serializeArray(input, context);
        } else if (isPlainObject(input)) {
          return serializePlainObject(input, context);
        } else if (input instanceof Promise) {
          return serializePromise(input, context);
        } else if (isAsyncIterable(input)) {
          return serializeAsyncIterable(input, context);
        } else if (input instanceof ArrayBuffer) {
          return serializeArrayBuffer(input, context);
        } else if (input instanceof Int8Array) {
          return serializeTypedArray("C" /* Int8Array */, input, context);
        } else if (input instanceof Uint8Array) {
          return serializeTypedArray("c" /* Uint8Array */, input, context);
        } else if (input instanceof Uint8ClampedArray) {
          return serializeTypedArray("U" /* Uint8ClampedArray */, input, context);
        } else if (input instanceof Int16Array) {
          return serializeTypedArray("P" /* Int16Array */, input, context);
        } else if (input instanceof Uint16Array) {
          return serializeTypedArray("p" /* Uint16Array */, input, context);
        } else if (input instanceof Int32Array) {
          return serializeTypedArray("L" /* Int32Array */, input, context);
        } else if (input instanceof Uint32Array) {
          return serializeTypedArray("l" /* Uint32Array */, input, context);
        } else if (input instanceof Float32Array) {
          return serializeTypedArray("F" /* Float32Array */, input, context);
        } else if (input instanceof Float64Array) {
          return serializeTypedArray("d" /* Float64Array */, input, context);
        } else if (input instanceof BigInt64Array) {
          return serializeTypedArray("N" /* BigInt64Array */, input, context);
        } else if (input instanceof BigUint64Array) {
          return serializeTypedArray("m" /* BigUint64Array */, input, context);
        } else if (input instanceof DataView) {
          return serializeTypedArray("V" /* DataView */, input, context);
        } else {
          throw new Error(
            `Unable to serialize value: ${JSON.stringify(input)}`
          );
        }
      }
      case "function": {
        throw new Error("Functions cannot be serialized");
      }
      default:
        throw new Error(
          `Unreachable. Reaching this code should be considered a bug`
        );
    }
  }
  const baseValue = encodeValue(value);
  output[0] = baseValue;
  checkWrittenValues();
  return {
    output,
    get pendingPromises() {
      return Array.from(pendingPromisesMap.values());
    },
    get pendingIterators() {
      return Array.from(pendingIteratorsMap.values());
    }
  };
}
function serializeNumber(input) {
  if (Number.isFinite(input)) {
    if (input === 0 && 1 / input === -Infinity) {
      return serializeTagValue("-0" /* NegativeZero */);
    } else {
      return input;
    }
  } else {
    if (input === Infinity) {
      return serializeTagValue("Infinity" /* Infinity_ */);
    } else if (input === -Infinity) {
      return serializeTagValue("-Infinity" /* NegativeInfinity */);
    } else {
      return serializeTagValue("NaN" /* NaN_ */);
    }
  }
}
function serializeSymbol(input) {
  return serializeTagValue("S" /* Symbol */, input.description);
}
function serializeBigInt(input) {
  return serializeTagValue("n" /* BigInt */, String(input));
}
function serializeDate(input) {
  return serializeTagValue("D" /* Date */, input.toJSON());
}
function serializeArray(input, context) {
  const items = [];
  for (const val of input) {
    items.push(context.encodeValue(val));
  }
  return items;
}
function serializeSet(input, context) {
  const { writtenValues: referencesMap } = context;
  const items = [];
  for (const val of input) {
    items.push(context.encodeValue(val));
  }
  const id = context.nextId();
  referencesMap.set(id, items);
  return serializeTagValue("W" /* Set */, id);
}
function serializeMap(input, context) {
  const { writtenValues: referencesMap } = context;
  const items = [];
  for (const [k, v] of input) {
    const encodedKey = context.encodeValue(k);
    const encodedValue = context.encodeValue(v);
    items.push([encodedKey, encodedValue]);
  }
  const id = context.nextId();
  referencesMap.set(id, items);
  return serializeTagValue("Q" /* Map */, id);
}
function serializePlainObject(input, context) {
  const obj = {};
  for (const [key, value] of Object.entries(input)) {
    obj[key] = context.encodeValue(value);
  }
  return obj;
}
function serializePromise(input, context) {
  const id = context.nextId();
  const resolvingPromise = input.then((value) => {
    const ret = context.encodeValue(value);
    context.writtenValues.set(id, ret);
    context.checkWrittenValues();
    return value;
  });
  const trackingPromise = trackPromise(id, resolvingPromise);
  context.pendingPromisesMap.set(id, trackingPromise);
  return serializeTagValue("@" /* Promise */, id);
}
function serializeArrayBuffer(input, context) {
  return serializeTypedArray("A" /* ArrayBuffer */, new Uint8Array(input), context);
}
function serializeTypedArray(tag, input, context) {
  const id = context.nextId();
  const buffer = bufferToBase64(input.buffer);
  context.writtenValues.set(id, buffer);
  return serializeTagValue(tag, id);
}
function serializeAsyncIterable(input, context) {
  const id = context.nextId();
  async function* resolveAsyncIterable(iter) {
    for await (const item of iter) {
      if (isAsyncIterable(item)) {
        yield* resolveAsyncIterable(item);
      } else {
        yield item;
      }
    }
  }
  const generator = async function* () {
    for await (const item of resolveAsyncIterable(input)) {
      const ret = context.encodeValue(item);
      const items2 = [...context.output[id] || [], ret];
      context.writtenValues.set(id, items2);
      context.checkWrittenValues();
      yield ret;
    }
    const items = [...context.output[id] || [], "done"];
    context.writtenValues.set(id, items);
    context.checkWrittenValues();
    yield "done";
  }();
  const tracked = trackAsyncIterable(id, generator);
  context.pendingIteratorsMap.set(id, tracked);
  return serializeTagValue("#" /* AsyncIterator */, id);
}
function serializeTagValue(tag, value) {
  return value ? `$${tag}${value}` : `$${tag}`;
}
function unsafe_writeOutput(tag, id, value) {
  const output = [serializeTagValue(tag, id)];
  output[id] = value;
  return output;
}
function isAsyncIterable(value) {
  return value != null && typeof value[Symbol.asyncIterator] === "function";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  internal_serialize,
  serializeTagValue,
  stringify,
  stringifyAsync,
  stringifyToStream
});
//# sourceMappingURL=stringify.cjs.map