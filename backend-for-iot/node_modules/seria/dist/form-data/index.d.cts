import { Replacer } from '../json/stringify.cjs';
import { Reviver } from '../json/parse.cjs';
import { FormData as FormData$1 } from 'undici';
import '../trackingPromise.cjs';
import '../trackingAsyncIterable.cjs';

/**
 * Encodes a value into a `FormData`.
 * @param value The value to encode.
 * @param replacer Converts a value to string.
 * @returns The value encoded as `FormData`.
 * @throws If the value is or have any promise.
 */
declare function encode(value: unknown, replacer?: Replacer): FormData;
/**
 * Encodes a value into a `FormData`, resolving all it's promises if any.
 * @param value The value to encode.
 * @param replacer Converts a value to string.
 * @returns The value encoded as `FormData`.
 */
declare function encodeAsync(value: unknown, replacer?: Replacer): Promise<FormData>;
type DecodeOptions = {
    /**
     * Custom type constructors to use.
     */
    types?: {
        /**
         * `FormData` constructor, this defaults to `globalThis.FormData`.
         */
        FormData: typeof FormData$1;
    };
};
/**
 * Decode a `FormData` into a value.
 * @param value The formData to decode.
 * @param reviver Converts a value.
 * @returns The decoded value.
 */
declare function decode(value: FormData, reviver?: Reviver | null, opts?: DecodeOptions): unknown;

export { decode, encode, encodeAsync };
