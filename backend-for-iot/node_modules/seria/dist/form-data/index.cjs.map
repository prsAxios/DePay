{"version":3,"sources":["../../src/form-data/index.ts","../../src/tag.ts","../../src/trackingPromise.ts","../../src/utils.ts","../../src/trackingAsyncIterable.ts","../../src/json/stringify.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { Tag, isTypedArrayTag } from \"../tag\";\r\nimport {\r\n  type Replacer,\r\n  internal_serialize,\r\n  serializeTagValue,\r\n} from \"../json/stringify\";\r\nimport { type Reviver } from \"../json/parse\";\r\nimport { isPlainObject } from \"../utils\";\r\nimport { base64ToBuffer } from \"../utils\";\r\n\r\n// The browser `FormData` is assignable to this one\r\nimport type { FormData as UndiciFormData } from \"undici\";\r\n\r\n/**\r\n * Encodes a value into a `FormData`.\r\n * @param value The value to encode.\r\n * @param replacer Converts a value to string.\r\n * @returns The value encoded as `FormData`.\r\n * @throws If the value is or have any promise.\r\n */\r\nexport function encode(value: unknown, replacer?: Replacer): FormData {\r\n  const formData = new FormData();\r\n  const { output, pendingPromises, pendingIterators } = internal_encodeFormData(\r\n    value,\r\n    {\r\n      formData,\r\n      replacer,\r\n    }\r\n  );\r\n\r\n  if (pendingPromises.length > 0) {\r\n    throw new Error(\"Serialiation result have pending promises\");\r\n  }\r\n\r\n  if (pendingIterators.length > 0) {\r\n    throw new Error(\"Serialiation result have pending async iterators\");\r\n  }\r\n\r\n  for (let i = 0; i < output.length; i++) {\r\n    formData.set(String(i), JSON.stringify(output[i]));\r\n  }\r\n\r\n  return formData;\r\n}\r\n\r\n/**\r\n * Encodes a value into a `FormData`, resolving all it's promises if any.\r\n * @param value The value to encode.\r\n * @param replacer Converts a value to string.\r\n * @returns The value encoded as `FormData`.\r\n */\r\nexport async function encodeAsync(\r\n  value: unknown,\r\n  replacer?: Replacer\r\n): Promise<FormData> {\r\n  const formData = new FormData();\r\n  const result = internal_encodeFormData(value, {\r\n    formData,\r\n    replacer,\r\n  });\r\n\r\n  await Promise.all(result.pendingPromises);\r\n\r\n  // Then we drain all the values on the async iterators\r\n  const iteratorPromises = result.pendingIterators.map(async (iter) => {\r\n    for await (const _ of iter) {\r\n      // nothing\r\n    }\r\n  });\r\n\r\n  await Promise.all(iteratorPromises);\r\n\r\n  for (let i = 0; i < result.output.length; i++) {\r\n    formData.set(String(i), JSON.stringify(result.output[i]));\r\n  }\r\n\r\n  return formData;\r\n}\r\n\r\nfunction internal_encodeFormData(\r\n  value: unknown,\r\n  opts: {\r\n    formData: FormData;\r\n    replacer?: Replacer;\r\n  }\r\n) {\r\n  const { formData, replacer: _replacer } = opts;\r\n  return internal_serialize(value, {\r\n    replacer: (input, ctx) => {\r\n      if (_replacer) {\r\n        const ret = _replacer(input, ctx);\r\n        if (ret !== undefined) {\r\n          return ret;\r\n        }\r\n      }\r\n\r\n      if (input instanceof FormData) {\r\n        const id = ctx.nextId();\r\n\r\n        for (const [key, entry] of input) {\r\n          const fieldName = `${id}_${key}`;\r\n          formData.set(fieldName, entry);\r\n        }\r\n\r\n        return serializeTagValue(Tag.FormData, id);\r\n      }\r\n\r\n      if (input instanceof File) {\r\n        const id = ctx.nextId();\r\n        formData.set(`${id}_file`, input);\r\n        return serializeTagValue(Tag.File, id);\r\n      }\r\n\r\n      return undefined;\r\n    },\r\n  });\r\n}\r\n\r\n// Inspired on: https://github.com/facebook/react/blob/1293047d6063f3508af15e68cca916660ded791e/packages/react-server/src/ReactFlightReplyServer.js#L379-L380\r\n\r\ntype DecodeContext = {\r\n  references: FormData;\r\n};\r\n\r\ntype DecodeOptions = {\r\n  /**\r\n   * Custom type constructors to use.\r\n   */\r\n  types?: {\r\n    /**\r\n     * `FormData` constructor, this defaults to `globalThis.FormData`.\r\n     */\r\n    FormData: typeof UndiciFormData;\r\n  };\r\n};\r\n\r\n/**\r\n * Decode a `FormData` into a value.\r\n * @param value The formData to decode.\r\n * @param reviver Converts a value.\r\n * @returns The decoded value.\r\n */\r\nexport function decode(\r\n  value: FormData,\r\n  reviver?: Reviver | null,\r\n  opts?: DecodeOptions\r\n): unknown {\r\n  const { types } = opts || {};\r\n  const { FormData: FormDataConstructor = globalThis.FormData } = types || {};\r\n\r\n  const baseValue = (function () {\r\n    const entry = value.get(\"0\");\r\n\r\n    if (!entry) {\r\n      throw new Error(\"Empty value to decode\");\r\n    }\r\n\r\n    try {\r\n      return JSON.parse(String(entry));\r\n    } catch {\r\n      throw new Error(`Failed to parse base value: ${entry}`);\r\n    }\r\n  })();\r\n\r\n  const deserizalizeValue = (input: any): unknown => {\r\n    if (reviver) {\r\n      const ret = reviver(input);\r\n      if (ret !== undefined) {\r\n        return ret;\r\n      }\r\n    }\r\n\r\n    switch (typeof input) {\r\n      case \"number\":\r\n        return input;\r\n      case \"boolean\":\r\n        return input;\r\n      case \"string\": {\r\n        if (input[0] === \"$\") {\r\n          const maybeTag = input.slice(1);\r\n\r\n          switch (true) {\r\n            case maybeTag[0] === Tag.String: {\r\n              return input.slice(2);\r\n            }\r\n            case maybeTag[0] === Tag.Symbol: {\r\n              return Symbol.for(input.slice(2));\r\n            }\r\n            case maybeTag[0] === Tag.Date: {\r\n              return new Date(input.slice(2));\r\n            }\r\n            case maybeTag[0] === Tag.BigInt: {\r\n              return BigInt(input.slice(2));\r\n            }\r\n            case maybeTag === Tag.Undefined: {\r\n              return undefined;\r\n            }\r\n            case maybeTag === Tag.Infinity_: {\r\n              return Infinity;\r\n            }\r\n            case maybeTag === Tag.NegativeInfinity: {\r\n              return -Infinity;\r\n            }\r\n            case maybeTag === Tag.NegativeZero: {\r\n              return -0;\r\n            }\r\n            case maybeTag === Tag.NaN_: {\r\n              return NaN;\r\n            }\r\n            case maybeTag[0] === Tag.Set: {\r\n              const id = input.slice(2);\r\n              const set = new Set<any>();\r\n\r\n              try {\r\n                const values = value.get(id);\r\n                if (values) {\r\n                  const data = JSON.parse(String(values)); // This is stored as an Array<string>\r\n                  if (Array.isArray(data)) {\r\n                    for (const item of data) {\r\n                      set.add(deserizalizeValue(item));\r\n                    }\r\n                  }\r\n                }\r\n              } catch (err) {\r\n                // failed to parse\r\n                console.error(err);\r\n              }\r\n\r\n              return set;\r\n            }\r\n            case maybeTag[0] === Tag.Map: {\r\n              const id = input.slice(2);\r\n              const map = new Map<any, any>();\r\n\r\n              try {\r\n                const values = value.get(id);\r\n                if (values) {\r\n                  const data = JSON.parse(String(values)); // This is stored as an Array<[string, string]>\r\n                  if (Array.isArray(data)) {\r\n                    for (const [key, value] of data) {\r\n                      const decodedKey = deserizalizeValue(key);\r\n                      const decodedValue = deserizalizeValue(value);\r\n                      map.set(decodedKey, decodedValue);\r\n                    }\r\n                  }\r\n                }\r\n              } catch (err) {\r\n                // failed to parse\r\n                console.error(err);\r\n              }\r\n\r\n              return map;\r\n            }\r\n            case maybeTag[0] === Tag.Promise: {\r\n              const id = input.slice(2);\r\n              const rawValue = value.get(id);\r\n\r\n              if (!rawValue) {\r\n                throw new Error(\"Failed to find promise resolved value\");\r\n              }\r\n\r\n              try {\r\n                const resolvedValue = deserizalizeValue(\r\n                  JSON.parse(String(rawValue))\r\n                );\r\n                return Promise.resolve(resolvedValue);\r\n              } catch {\r\n                throw new Error(\"Unable to resolve promise value\");\r\n              }\r\n            }\r\n            case maybeTag[0] === Tag.AsyncIterator: {\r\n              const id = input.slice(2);\r\n              const json = value.get(id);\r\n\r\n              if (!json) {\r\n                throw new Error(`Unable to get async iterator '${id}'`);\r\n              }\r\n\r\n              const asyncIteratorValues = JSON.parse(String(json));\r\n\r\n              if (Array.isArray(asyncIteratorValues)) {\r\n                const length = asyncIteratorValues.length - 1;\r\n                const isDone = asyncIteratorValues[length] === \"done\";\r\n\r\n                const values = isDone\r\n                  ? asyncIteratorValues.slice(0, -1)\r\n                  : asyncIteratorValues;\r\n\r\n                const generator = (async function* () {\r\n                  for (const item of values) {\r\n                    const resolvedValue = deserizalizeValue(item);\r\n                    yield resolvedValue;\r\n                  }\r\n                })();\r\n\r\n                return generator;\r\n              } else {\r\n                throw new Error(\r\n                  \"Failed to parse async iterator, expected array of values\"\r\n                );\r\n              }\r\n            }\r\n            case maybeTag[0] === Tag.FormData: {\r\n              const formData = new FormDataConstructor();\r\n              const id = input.slice(2);\r\n\r\n              value.forEach((entry, key) => {\r\n                const entryKey = `${id}_`;\r\n                if (key.startsWith(entryKey)) {\r\n                  const fieldName = key.slice(entryKey.length);\r\n                  formData.set(fieldName, entry);\r\n                }\r\n              });\r\n\r\n              return formData;\r\n            }\r\n            case isTypedArrayTag(maybeTag[0]): {\r\n              return deserializeBuffer(maybeTag[0], input, {\r\n                references: value,\r\n              });\r\n            }\r\n            case maybeTag[0] === Tag.File: {\r\n              const id = input.slice(2);\r\n              const file = value.get(`${id}_file`);\r\n\r\n              if (!file) {\r\n                throw new Error(`File '${id}_file' was not found`);\r\n              }\r\n\r\n              return file;\r\n            }\r\n            default:\r\n              throw new Error(`Unknown reference value: ${input}`);\r\n          }\r\n        } else {\r\n          throw new Error(`Invalid reference value: ${input}`);\r\n        }\r\n      }\r\n      case \"object\": {\r\n        if (input === null) {\r\n          return null;\r\n        } else if (Array.isArray(input)) {\r\n          const arr: any[] = [];\r\n          for (const item of input) {\r\n            arr.push(deserizalizeValue(item));\r\n          }\r\n          return arr;\r\n        } else if (isPlainObject(input)) {\r\n          const obj: Record<string, unknown> = {};\r\n\r\n          for (const [key, value] of Object.entries(input)) {\r\n            obj[key] = deserizalizeValue(value);\r\n          }\r\n\r\n          return obj;\r\n        } else {\r\n          throw new Error(`Invalid object value: ${JSON.stringify(input)}`);\r\n        }\r\n      }\r\n      default:\r\n        throw new Error(`Invalid value: ${input}`);\r\n    }\r\n  };\r\n\r\n  return deserizalizeValue(baseValue);\r\n}\r\n\r\nfunction deserializeBuffer(tag: Tag, input: string, context: DecodeContext) {\r\n  const getBufferData = () => {\r\n    const id = input.slice(2);\r\n    const data = context.references.get(id);\r\n    if (!data) {\r\n      throw new Error(`Unable to get '${input}' buffer data`);\r\n    }\r\n    return JSON.parse(String(data));\r\n  };\r\n\r\n  switch (tag) {\r\n    case Tag.ArrayBuffer: {\r\n      const bytes = base64ToBuffer(getBufferData(), Uint8Array);\r\n      return bytes.buffer;\r\n    }\r\n    case Tag.Int8Array:\r\n      return base64ToBuffer(getBufferData(), Int8Array);\r\n    case Tag.Uint8Array:\r\n      return base64ToBuffer(getBufferData(), Uint8Array);\r\n    case Tag.Uint8ClampedArray:\r\n      return base64ToBuffer(getBufferData(), Uint8ClampedArray);\r\n    case Tag.Int16Array:\r\n      return base64ToBuffer(getBufferData(), Int16Array);\r\n    case Tag.Uint16Array:\r\n      return base64ToBuffer(getBufferData(), Uint16Array);\r\n    case Tag.Int32Array:\r\n      return base64ToBuffer(getBufferData(), Int32Array);\r\n    case Tag.Uint32Array:\r\n      return base64ToBuffer(getBufferData(), Uint32Array);\r\n    case Tag.Float32Array:\r\n      return base64ToBuffer(getBufferData(), Float32Array);\r\n    case Tag.Float64Array:\r\n      return base64ToBuffer(getBufferData(), Float64Array);\r\n    case Tag.BigInt64Array: {\r\n      const bytes = base64ToBuffer(getBufferData(), Uint8Array);\r\n      return new BigInt64Array(bytes.buffer);\r\n    }\r\n    case Tag.BigUint64Array: {\r\n      const bytes = base64ToBuffer(getBufferData(), Uint8Array);\r\n      return new BigUint64Array(bytes.buffer);\r\n    }\r\n    case Tag.DataView: {\r\n      const bytes = base64ToBuffer(getBufferData(), Uint8Array);\r\n      return new DataView(bytes.buffer);\r\n    }\r\n    default:\r\n      throw new Error(`Unknown typed array buffer: ${input}`);\r\n  }\r\n}\r\n","\r\n// We are using a format similar to the used in the react source code,\r\n// the problem is that using more than 1 character may introduce unintended collisions if handle incorrectly,\r\n// for example: $NaN and $N could case an error if handle incorrectly during deserialization.\r\n// We may need to keep only 1 character in the future to be consistent and prevent collisions easily,\r\n// or  get a better mechanism to handle collitions on the first character.\r\n\r\nexport const enum Tag {\r\n  String = \"$\",\r\n  Date = \"D\",\r\n  BigInt = \"n\",\r\n  FormData = \"K\",\r\n  Promise = \"@\",\r\n  Symbol = \"S\",\r\n  Set = \"W\",\r\n  Map = \"Q\",\r\n  Undefined = \"undefined\",\r\n  Infinity_ = \"Infinity\",\r\n  NegativeInfinity = \"-Infinity\",\r\n  NegativeZero = \"-0\",\r\n  NaN_ = \"NaN\",\r\n\r\n  // Others\r\n  File = \"k\",\r\n  AsyncIterator = \"#\",\r\n\r\n  // Buffers\r\n  ArrayBuffer = \"A\",\r\n  Int8Array = \"C\",\r\n  Uint8Array = \"c\",\r\n  Uint8ClampedArray = \"U\",\r\n  Int16Array = \"P\",\r\n  Uint16Array = \"p\",\r\n  Int32Array = \"L\",\r\n  Uint32Array = \"l\",\r\n  Float32Array = \"F\",\r\n  Float64Array = \"d\",\r\n  BigInt64Array = \"N\",\r\n  BigUint64Array = \"m\",\r\n  DataView = \"V\",\r\n}\r\n\r\nconst TYPED_ARRAY_TAGS = [\r\n  Tag.ArrayBuffer,\r\n  Tag.Int8Array,\r\n  Tag.Uint8Array,\r\n  Tag.Uint8ClampedArray,\r\n  Tag.Int16Array,\r\n  Tag.Uint16Array,\r\n  Tag.Int32Array,\r\n  Tag.Uint32Array,\r\n  Tag.Float32Array,\r\n  Tag.Float64Array,\r\n  Tag.BigInt64Array,\r\n  Tag.BigUint64Array,\r\n  Tag.DataView,\r\n];\r\n\r\nexport function isTypedArrayTag(tag: string): tag is Tag {\r\n  return TYPED_ARRAY_TAGS.includes(tag as Tag);\r\n}\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst TRACKING_PROMISE_SYMBOL = Symbol(\"TRACKING_PROMISE_SYMBOL\");\r\n\r\ntype PromiseStatus<T> =\r\n  | { state: \"pending\" }\r\n  | { state: \"resolved\"; data: T }\r\n  | { state: \"rejected\"; error: unknown };\r\n\r\nexport type TrackingPromise<T> = Promise<T> & {\r\n  id: number;\r\n  status: PromiseStatus<T>;\r\n  [TRACKING_PROMISE_SYMBOL]: true;\r\n};\r\n\r\nexport function trackPromise<T>(\r\n  id: number,\r\n  promise: Promise<T>\r\n): TrackingPromise<T> {\r\n  const tracking = Object.assign(promise, {\r\n    id,\r\n    status: { state: \"pending\" },\r\n    [TRACKING_PROMISE_SYMBOL]: true,\r\n  }) as TrackingPromise<T>;\r\n\r\n  tracking\r\n    .then((data) => {\r\n      tracking.status = {\r\n        state: \"resolved\",\r\n        data,\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      tracking.status = {\r\n        state: \"rejected\",\r\n        error,\r\n      };\r\n    });\r\n\r\n  return tracking;\r\n}\r\n\r\nexport function isTrackingPromise(\r\n  value: any\r\n): value is TrackingPromise<unknown> {\r\n  return (\r\n    value != null &&\r\n    typeof value.id === \"number\" &&\r\n    typeof value.status === \"object\" &&\r\n    value[TRACKING_PROMISE_SYMBOL] === true &&\r\n    value instanceof Promise\r\n  );\r\n}\r\n\r\nexport async function forEachPromise<T = unknown>(\r\n  promises: TrackingPromise<T>[],\r\n  callbacks: {\r\n    onResolved: (state: { data: T; id: number }) => void;\r\n    onRejected?: (state: { error: unknown; id: number }) => void;\r\n  }\r\n) {\r\n  const { onResolved, onRejected } = callbacks;\r\n  const pendingPromises: Promise<void>[] = [];\r\n\r\n  for (const p of promises) {\r\n    let resolving = p.then((data) => {\r\n      onResolved({ id: p.id, data });\r\n    });\r\n\r\n    if (onRejected) {\r\n      resolving = resolving.catch((error) => {\r\n        onRejected({ id: p.id, error });\r\n      });\r\n    }\r\n\r\n    pendingPromises.push(resolving);\r\n  }\r\n\r\n  await Promise.all(pendingPromises);\r\n}\r\n","// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\r\nexport function isPlainObject(value: unknown) {\r\n  if (typeof value !== \"object\" || value === null) {\r\n    return false;\r\n  }\r\n\r\n  const prototype = Object.getPrototypeOf(value);\r\n  return (\r\n    (prototype === null ||\r\n      prototype === Object.prototype ||\r\n      Object.getPrototypeOf(prototype) === null) &&\r\n    !(Symbol.toStringTag in value) &&\r\n    !(Symbol.iterator in value)\r\n  );\r\n}\r\n\r\nexport function bufferToBase64(buffer: ArrayBuffer) {\r\n  let binary = \"\";\r\n  const bytes = new Uint8Array(buffer);\r\n  for (let i = 0; i < bytes.byteLength; i++) {\r\n    binary += String.fromCharCode(bytes[i]);\r\n  }\r\n\r\n  return btoa(binary);\r\n}\r\n\r\ninterface TypedArrayLike extends ArrayBufferView {\r\n  [index: number]: number;\r\n}\r\n\r\nexport function base64ToBuffer<T extends TypedArrayLike>(\r\n  base64String: string,\r\n  Constructor: new (buffer: ArrayBuffer) => T\r\n): T {\r\n  const binaryString = atob(base64String);\r\n  const bytes = new Uint8Array(binaryString.length);\r\n\r\n  for (let i = 0; i < binaryString.length; i++) {\r\n    bytes[i] = binaryString.charCodeAt(i);\r\n  }\r\n\r\n  return new Constructor(bytes.buffer);\r\n}\r\n\r\nexport const delay = (ms: number) =>\r\n  new Promise<void>((resolve) => setTimeout(resolve, ms));\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst TRACKING_ASYNC_ITERABLE_SYMBOL = Symbol(\"TRACKING_ASYNC_ITERABLE_SYMBOL\");\r\n\r\nexport type TrackingAsyncIterable<T, TContext = unknown> = AsyncIterable<T> & {\r\n  id: number;\r\n  context?: TContext;\r\n  [TRACKING_ASYNC_ITERABLE_SYMBOL]: true;\r\n};\r\n\r\nexport function trackAsyncIterable<T, TContext = unknown>(\r\n  id: number,\r\n  asyncIterator: AsyncIterable<T>,\r\n  context?: TContext\r\n): TrackingAsyncIterable<T> {\r\n  return Object.assign(asyncIterator, {\r\n    id,\r\n    context,\r\n    [TRACKING_ASYNC_ITERABLE_SYMBOL]: true as const,\r\n  });\r\n}\r\n\r\nexport function isTrackingAsyncIterable(\r\n  value: any\r\n): value is TrackingAsyncIterable<unknown> {\r\n  return (\r\n    value != null &&\r\n    typeof value.id === \"number\" &&\r\n    typeof value[Symbol.asyncIterator] === \"function\" &&\r\n    value[TRACKING_ASYNC_ITERABLE_SYMBOL] === true\r\n  );\r\n}\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  type TrackingPromise,\r\n  trackPromise,\r\n  forEachPromise,\r\n} from \"../trackingPromise\";\r\nimport { bufferToBase64, isPlainObject } from \"../utils\";\r\nimport { Tag } from \"../tag\";\r\nimport {\r\n  trackAsyncIterable,\r\n  type TrackingAsyncIterable,\r\n} from \"../trackingAsyncIterable\";\r\n\r\ntype SerializeContext = {\r\n  output: unknown[];\r\n  writtenValues: Map<number, unknown>;\r\n  pendingPromisesMap: Map<number, TrackingPromise<any>>;\r\n  pendingIteratorsMap: Map<number, TrackingAsyncIterable<any>>;\r\n  space?: string | number;\r\n  nextId: () => number;\r\n  encodeValue: (input: any) => unknown;\r\n  checkWrittenValues: () => void;\r\n};\r\n\r\nexport type Replacer = (\r\n  value: any,\r\n  context: SerializeContext\r\n) => string | undefined;\r\n\r\n/**\r\n * Converts a value to a json string.\r\n * @param value The value to convert.\r\n * @param replacer A function that encode a custom value.\r\n * @param space Adds indentation, white space to the json values line-breaks.\r\n * @returns The json string.\r\n * @throws If the promise contains any promise. Use `stringifyAsync` or `stringifyToStream` to convert value with promises.\r\n */\r\nexport function stringify(\r\n  value: unknown,\r\n  replacer?: Replacer | null,\r\n  space?: number | string\r\n) {\r\n  const { output, pendingPromises, pendingIterators } = internal_serialize(\r\n    value,\r\n    {\r\n      replacer,\r\n      space,\r\n    }\r\n  );\r\n\r\n  if (pendingPromises.length > 0) {\r\n    throw new Error(\"Serialiation result have pending promises\");\r\n  }\r\n\r\n  if (pendingIterators.length > 0) {\r\n    throw new Error(\"Serialiation result have pending async iterators\");\r\n  }\r\n\r\n  return JSON.stringify(output, null, space);\r\n}\r\n\r\n/**\r\n * Converts a value to a json string and resolve all its promises.\r\n * @param value The value to convert.\r\n * @param replacer A function that encode a custom value.\r\n * @param space Adds indentation, white space to the json values line-breaks.\r\n * @returns The json string.\r\n */\r\nexport async function stringifyAsync(\r\n  value: unknown,\r\n  replacer?: Replacer | null,\r\n  space?: number | string\r\n) {\r\n  const result = internal_serialize(value, {\r\n    replacer,\r\n    space,\r\n  });\r\n\r\n  // We need to resolve promises first in case any return an async iterator\r\n  await Promise.all(result.pendingPromises);\r\n\r\n  // Then we drain all the values on the async iterators\r\n  const iteratorPromises = result.pendingIterators.map(async (gen) => {\r\n    for await (const _ of gen) {\r\n      // nothing\r\n    }\r\n  });\r\n\r\n  await Promise.all(iteratorPromises);\r\n  return JSON.stringify(result.output, null, space);\r\n}\r\n\r\n/**\r\n * Convert a value to a `ReadableStream` that stringify each value.\r\n * @param value The value to convert.\r\n * @param replacer A function that encode a custom value.\r\n * @param space Adds indentation, white space to the json values line-breaks.\r\n * @returns A stream that stringify each value.\r\n */\r\nexport function stringifyToStream(\r\n  value: unknown,\r\n  replacer?: Replacer | null,\r\n  space?: number | string\r\n) {\r\n  const result = internal_serialize(value, {\r\n    replacer,\r\n    space,\r\n  });\r\n\r\n  return new ReadableStream<string>({\r\n    async start(controller) {\r\n      const json = JSON.stringify(result.output, null, space);\r\n      const pendingIteratorsMap = new Map<\r\n        number,\r\n        TrackingAsyncIterable<unknown>\r\n      >();\r\n      controller.enqueue(`${json}\\n\\n`);\r\n\r\n      await forEachPromise(result.pendingPromises, {\r\n        async onResolved({ data, id }) {\r\n          const resolved = trackPromise(id, Promise.resolve(data));\r\n\r\n          // `stringifyAsync` with an initial `id`\r\n          // We use the initial to set the promise on the correct slot\r\n          const serializedPromise = internal_serialize(resolved, {\r\n            replacer,\r\n            initialID: id,\r\n          });\r\n\r\n          await Promise.all(serializedPromise.pendingPromises);\r\n          const promiseJson = JSON.stringify(\r\n            serializedPromise.output,\r\n            null,\r\n            space\r\n          );\r\n\r\n          if (serializedPromise.pendingIterators.length > 0) {\r\n            for (const gen of serializedPromise.pendingIterators) {\r\n              pendingIteratorsMap.set(gen.id, gen);\r\n            }\r\n          }\r\n\r\n          controller.enqueue(`${promiseJson}\\n\\n`);\r\n        },\r\n      });\r\n\r\n      if (result.pendingIterators.length > 0) {\r\n        for (const gen of result.pendingIterators) {\r\n          pendingIteratorsMap.set(gen.id, gen);\r\n        }\r\n      }\r\n\r\n      const pendingIterators = Array.from(pendingIteratorsMap.values());\r\n\r\n      const resolveIterators = pendingIterators.map(async (iter) => {\r\n        for await (const item of iter) {\r\n          const asyncIteratorOutput = unsafe_writeOutput(\r\n            Tag.AsyncIterator,\r\n            iter.id,\r\n            [item]\r\n          );\r\n\r\n          const genJson = JSON.stringify(asyncIteratorOutput, null, space);\r\n          controller.enqueue(`${genJson}\\n\\n`);\r\n        }\r\n      });\r\n\r\n      await Promise.all(resolveIterators);\r\n      controller.close();\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function internal_serialize(\r\n  value: unknown,\r\n  opts: {\r\n    replacer?: Replacer | null;\r\n    initialID?: number;\r\n    space?: number | string;\r\n  }\r\n) {\r\n  const { replacer, space, initialID = 1 } = opts;\r\n  const writtenValues = new Map<number, unknown>();\r\n  const pendingPromisesMap = new Map<number, TrackingPromise<any>>();\r\n  const pendingIteratorsMap = new Map<number, TrackingAsyncIterable<any>>();\r\n  const output: unknown[] = [];\r\n  let id = initialID;\r\n\r\n  // Get the next id\r\n  const nextId = () => {\r\n    return id++;\r\n  };\r\n\r\n  // Update the references of the written values\r\n  const checkWrittenValues = () => {\r\n    for (const [id, value] of writtenValues) {\r\n      output[id] = value;\r\n    }\r\n  };\r\n\r\n  const context: SerializeContext = {\r\n    output,\r\n    writtenValues,\r\n    pendingPromisesMap,\r\n    pendingIteratorsMap,\r\n    space,\r\n    nextId,\r\n    encodeValue,\r\n    checkWrittenValues,\r\n  };\r\n\r\n  function encodeValue(input: any) {\r\n    // Custom serializer\r\n    if (replacer) {\r\n      const serialized = replacer(input, context);\r\n      if (serialized !== undefined) {\r\n        return serialized;\r\n      }\r\n    }\r\n\r\n    // Default serializer\r\n    switch (typeof input) {\r\n      case \"string\":\r\n        return `$$${input}`;\r\n      case \"boolean\":\r\n        return input;\r\n      case \"number\":\r\n        return serializeNumber(input);\r\n      case \"symbol\":\r\n        return serializeSymbol(input);\r\n      case \"undefined\":\r\n        return \"$undefined\";\r\n      case \"bigint\":\r\n        return serializeBigInt(input);\r\n      case \"object\": {\r\n        if (input === null) {\r\n          return null;\r\n        } else if (input instanceof Date) {\r\n          return serializeDate(input);\r\n        } else if (input instanceof Map) {\r\n          return serializeMap(input, context);\r\n        } else if (input instanceof Set) {\r\n          return serializeSet(input, context);\r\n        } else if (Array.isArray(input)) {\r\n          return serializeArray(input, context);\r\n        } else if (isPlainObject(input)) {\r\n          return serializePlainObject(input, context);\r\n        } else if (input instanceof Promise) {\r\n          return serializePromise(input, context);\r\n        } else if (isAsyncIterable(input)) {\r\n          return serializeAsyncIterable(input, context);\r\n        }\r\n        // Serialize typed arrrays\r\n        else if (input instanceof ArrayBuffer) {\r\n          return serializeArrayBuffer(input, context);\r\n        } else if (input instanceof Int8Array) {\r\n          return serializeTypedArray(Tag.Int8Array, input, context);\r\n        } else if (input instanceof Uint8Array) {\r\n          return serializeTypedArray(Tag.Uint8Array, input, context);\r\n        } else if (input instanceof Uint8ClampedArray) {\r\n          return serializeTypedArray(Tag.Uint8ClampedArray, input, context);\r\n        } else if (input instanceof Int16Array) {\r\n          return serializeTypedArray(Tag.Int16Array, input, context);\r\n        } else if (input instanceof Uint16Array) {\r\n          return serializeTypedArray(Tag.Uint16Array, input, context);\r\n        } else if (input instanceof Int32Array) {\r\n          return serializeTypedArray(Tag.Int32Array, input, context);\r\n        } else if (input instanceof Uint32Array) {\r\n          return serializeTypedArray(Tag.Uint32Array, input, context);\r\n        } else if (input instanceof Float32Array) {\r\n          return serializeTypedArray(Tag.Float32Array, input, context);\r\n        } else if (input instanceof Float64Array) {\r\n          return serializeTypedArray(Tag.Float64Array, input, context);\r\n        } else if (input instanceof BigInt64Array) {\r\n          return serializeTypedArray(Tag.BigInt64Array, input, context);\r\n        } else if (input instanceof BigUint64Array) {\r\n          return serializeTypedArray(Tag.BigUint64Array, input, context);\r\n        } else if (input instanceof DataView) {\r\n          return serializeTypedArray(Tag.DataView, input, context);\r\n        } else {\r\n          throw new Error(\r\n            `Unable to serialize value: ${JSON.stringify(input)}`\r\n          );\r\n        }\r\n      }\r\n      case \"function\": {\r\n        throw new Error(\"Functions cannot be serialized\");\r\n      }\r\n      default:\r\n        throw new Error(\r\n          `Unreachable. Reaching this code should be considered a bug`\r\n        );\r\n    }\r\n  }\r\n\r\n  // The base value contains all the references ids\r\n  const baseValue = encodeValue(value);\r\n  output[0] = baseValue;\r\n\r\n  checkWrittenValues();\r\n\r\n  return {\r\n    output,\r\n    get pendingPromises() {\r\n      return Array.from(pendingPromisesMap.values());\r\n    },\r\n    get pendingIterators() {\r\n      return Array.from(pendingIteratorsMap.values());\r\n    },\r\n  };\r\n}\r\n\r\nfunction serializeNumber(input: number) {\r\n  if (Number.isFinite(input)) {\r\n    if (input === 0 && 1 / input === -Infinity) {\r\n      return serializeTagValue(Tag.NegativeZero);\r\n    } else {\r\n      return input;\r\n    }\r\n  } else {\r\n    if (input === Infinity) {\r\n      return serializeTagValue(Tag.Infinity_);\r\n    } else if (input === -Infinity) {\r\n      return serializeTagValue(Tag.NegativeInfinity);\r\n    } else {\r\n      return serializeTagValue(Tag.NaN_);\r\n    }\r\n  }\r\n}\r\n\r\nfunction serializeSymbol(input: symbol) {\r\n  return serializeTagValue(Tag.Symbol, input.description);\r\n}\r\n\r\nfunction serializeBigInt(input: bigint) {\r\n  return serializeTagValue(Tag.BigInt, String(input));\r\n}\r\n\r\nfunction serializeDate(input: Date) {\r\n  return serializeTagValue(Tag.Date, input.toJSON());\r\n}\r\n\r\nfunction serializeArray(input: Array<any>, context: SerializeContext) {\r\n  const items: unknown[] = [];\r\n\r\n  for (const val of input) {\r\n    items.push(context.encodeValue(val));\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nfunction serializeSet(input: Set<any>, context: SerializeContext) {\r\n  const { writtenValues: referencesMap } = context;\r\n  const items: unknown[] = [];\r\n\r\n  for (const val of input) {\r\n    items.push(context.encodeValue(val));\r\n  }\r\n\r\n  const id = context.nextId();\r\n  referencesMap.set(id, items);\r\n  return serializeTagValue(Tag.Set, id);\r\n}\r\n\r\nfunction serializeMap(input: Map<any, any>, context: SerializeContext) {\r\n  const { writtenValues: referencesMap } = context;\r\n  const items: [unknown, unknown][] = [];\r\n\r\n  for (const [k, v] of input) {\r\n    const encodedKey = context.encodeValue(k);\r\n    const encodedValue = context.encodeValue(v);\r\n    items.push([encodedKey, encodedValue]);\r\n  }\r\n\r\n  const id = context.nextId();\r\n  referencesMap.set(id, items);\r\n  return serializeTagValue(Tag.Map, id);\r\n}\r\n\r\nfunction serializePlainObject(\r\n  input: Record<string, unknown>,\r\n  context: SerializeContext\r\n) {\r\n  const obj: Record<string, unknown> = {};\r\n\r\n  for (const [key, value] of Object.entries(input)) {\r\n    obj[key] = context.encodeValue(value);\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction serializePromise(input: Promise<any>, context: SerializeContext) {\r\n  const id = context.nextId();\r\n\r\n  // We create a new promise that resolve to the serialized value\r\n  const resolvingPromise = input.then((value) => {\r\n    const ret = context.encodeValue(value);\r\n    context.writtenValues.set(id, ret);\r\n    context.checkWrittenValues(); // Update the values with the new one\r\n    return value;\r\n  });\r\n\r\n  const trackingPromise = trackPromise(id, resolvingPromise);\r\n  context.pendingPromisesMap.set(id, trackingPromise);\r\n  return serializeTagValue(Tag.Promise, id);\r\n}\r\n\r\nfunction serializeArrayBuffer(input: ArrayBuffer, context: SerializeContext) {\r\n  return serializeTypedArray(Tag.ArrayBuffer, new Uint8Array(input), context);\r\n}\r\n\r\nfunction serializeTypedArray(\r\n  tag: Tag,\r\n  input: ArrayBufferView,\r\n  context: SerializeContext\r\n) {\r\n  const id = context.nextId();\r\n  const buffer = bufferToBase64(input.buffer);\r\n  context.writtenValues.set(id, buffer);\r\n  return serializeTagValue(tag, id);\r\n}\r\n\r\nfunction serializeAsyncIterable(\r\n  input: AsyncIterable<unknown>,\r\n  context: SerializeContext\r\n) {\r\n  const id = context.nextId();\r\n\r\n  // We send all the async iterable emited and any nested async iterable values.\r\n  // Flattening the nested iterable would make no sense because we are not returning the exact\r\n  // value was originally stringified. So we could:\r\n  // 1. Throw an error and don't stringify nested async iterables\r\n  // 2. Attempt to stringify nested async iterables which could lead to infinite loops.\r\n  async function* resolveAsyncIterable(\r\n    iter: AsyncIterable<unknown>\r\n  ): AsyncGenerator<unknown> {\r\n    for await (const item of iter) {\r\n      if (isAsyncIterable(item)) {\r\n        // console.warn(\"Avoid returning nested async iterables, prefer using `yield*` instead\")\r\n        yield* resolveAsyncIterable(item);\r\n      } else {\r\n        yield item;\r\n      }\r\n    }\r\n  }\r\n\r\n  const generator = (async function* () {\r\n    for await (const item of resolveAsyncIterable(input)) {\r\n      const ret = context.encodeValue(item);\r\n\r\n      // Push the new generated value\r\n      const items = [...((context.output[id] as any[]) || []), ret];\r\n      context.writtenValues.set(id, items);\r\n      context.checkWrittenValues();\r\n      yield ret;\r\n    }\r\n\r\n    // Notify is done\r\n    const items = [...((context.output[id] as any[]) || []), \"done\"];\r\n    context.writtenValues.set(id, items);\r\n    context.checkWrittenValues();\r\n    yield \"done\";\r\n  })();\r\n\r\n  const tracked = trackAsyncIterable(id, generator);\r\n  context.pendingIteratorsMap.set(id, tracked);\r\n  return serializeTagValue(Tag.AsyncIterator, id);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function serializeTagValue(tag: Tag, value?: number | string) {\r\n  return value ? `$${tag}${value}` : `$${tag}`;\r\n}\r\n\r\nfunction unsafe_writeOutput(tag: Tag, id: number, value: unknown) {\r\n  const output: unknown[] = [serializeTagValue(tag, id)];\r\n  output[id] = value;\r\n  return output;\r\n}\r\n\r\nfunction isAsyncIterable(value: any): value is AsyncIterable<unknown> {\r\n  return value != null && typeof value[Symbol.asyncIterator] === \"function\";\r\n}\r\n"],"mappings":"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","names":["id","value","items","value"]}