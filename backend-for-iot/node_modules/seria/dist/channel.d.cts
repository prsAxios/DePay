type Sender<T> = {
    id: number;
    send: (value: T | Promise<T>) => void;
    close: () => void;
};
type Receiver<T> = {
    id: number;
    recv: () => Promise<T | undefined>;
    next: () => Promise<IteratorResult<T | undefined>>;
    isClosed: () => boolean;
    [Symbol.asyncIterator]: () => AsyncIterator<T>;
};
type ChannelOptions = {
    id: number;
};
/**
 * Create a multi-producer and single consumer channel.
 * @param options Options used to create the channel.
 * @returns A tuple with the sender and receiver.
 */
declare function createChannel<T>(options: ChannelOptions): readonly [Sender<T>, Receiver<T>];

export { type Receiver, type Sender, createChannel };
