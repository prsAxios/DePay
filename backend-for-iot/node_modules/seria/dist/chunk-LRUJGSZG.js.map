{"version":3,"sources":["../src/json/stringify.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport {\r\n  type TrackingPromise,\r\n  trackPromise,\r\n  forEachPromise,\r\n} from \"../trackingPromise\";\r\nimport { bufferToBase64, isPlainObject } from \"../utils\";\r\nimport { Tag } from \"../tag\";\r\nimport {\r\n  trackAsyncIterable,\r\n  type TrackingAsyncIterable,\r\n} from \"../trackingAsyncIterable\";\r\n\r\ntype SerializeContext = {\r\n  output: unknown[];\r\n  writtenValues: Map<number, unknown>;\r\n  pendingPromisesMap: Map<number, TrackingPromise<any>>;\r\n  pendingIteratorsMap: Map<number, TrackingAsyncIterable<any>>;\r\n  space?: string | number;\r\n  nextId: () => number;\r\n  encodeValue: (input: any) => unknown;\r\n  checkWrittenValues: () => void;\r\n};\r\n\r\nexport type Replacer = (\r\n  value: any,\r\n  context: SerializeContext\r\n) => string | undefined;\r\n\r\n/**\r\n * Converts a value to a json string.\r\n * @param value The value to convert.\r\n * @param replacer A function that encode a custom value.\r\n * @param space Adds indentation, white space to the json values line-breaks.\r\n * @returns The json string.\r\n * @throws If the promise contains any promise. Use `stringifyAsync` or `stringifyToStream` to convert value with promises.\r\n */\r\nexport function stringify(\r\n  value: unknown,\r\n  replacer?: Replacer | null,\r\n  space?: number | string\r\n) {\r\n  const { output, pendingPromises, pendingIterators } = internal_serialize(\r\n    value,\r\n    {\r\n      replacer,\r\n      space,\r\n    }\r\n  );\r\n\r\n  if (pendingPromises.length > 0) {\r\n    throw new Error(\"Serialiation result have pending promises\");\r\n  }\r\n\r\n  if (pendingIterators.length > 0) {\r\n    throw new Error(\"Serialiation result have pending async iterators\");\r\n  }\r\n\r\n  return JSON.stringify(output, null, space);\r\n}\r\n\r\n/**\r\n * Converts a value to a json string and resolve all its promises.\r\n * @param value The value to convert.\r\n * @param replacer A function that encode a custom value.\r\n * @param space Adds indentation, white space to the json values line-breaks.\r\n * @returns The json string.\r\n */\r\nexport async function stringifyAsync(\r\n  value: unknown,\r\n  replacer?: Replacer | null,\r\n  space?: number | string\r\n) {\r\n  const result = internal_serialize(value, {\r\n    replacer,\r\n    space,\r\n  });\r\n\r\n  // We need to resolve promises first in case any return an async iterator\r\n  await Promise.all(result.pendingPromises);\r\n\r\n  // Then we drain all the values on the async iterators\r\n  const iteratorPromises = result.pendingIterators.map(async (gen) => {\r\n    for await (const _ of gen) {\r\n      // nothing\r\n    }\r\n  });\r\n\r\n  await Promise.all(iteratorPromises);\r\n  return JSON.stringify(result.output, null, space);\r\n}\r\n\r\n/**\r\n * Convert a value to a `ReadableStream` that stringify each value.\r\n * @param value The value to convert.\r\n * @param replacer A function that encode a custom value.\r\n * @param space Adds indentation, white space to the json values line-breaks.\r\n * @returns A stream that stringify each value.\r\n */\r\nexport function stringifyToStream(\r\n  value: unknown,\r\n  replacer?: Replacer | null,\r\n  space?: number | string\r\n) {\r\n  const result = internal_serialize(value, {\r\n    replacer,\r\n    space,\r\n  });\r\n\r\n  return new ReadableStream<string>({\r\n    async start(controller) {\r\n      const json = JSON.stringify(result.output, null, space);\r\n      const pendingIteratorsMap = new Map<\r\n        number,\r\n        TrackingAsyncIterable<unknown>\r\n      >();\r\n      controller.enqueue(`${json}\\n\\n`);\r\n\r\n      await forEachPromise(result.pendingPromises, {\r\n        async onResolved({ data, id }) {\r\n          const resolved = trackPromise(id, Promise.resolve(data));\r\n\r\n          // `stringifyAsync` with an initial `id`\r\n          // We use the initial to set the promise on the correct slot\r\n          const serializedPromise = internal_serialize(resolved, {\r\n            replacer,\r\n            initialID: id,\r\n          });\r\n\r\n          await Promise.all(serializedPromise.pendingPromises);\r\n          const promiseJson = JSON.stringify(\r\n            serializedPromise.output,\r\n            null,\r\n            space\r\n          );\r\n\r\n          if (serializedPromise.pendingIterators.length > 0) {\r\n            for (const gen of serializedPromise.pendingIterators) {\r\n              pendingIteratorsMap.set(gen.id, gen);\r\n            }\r\n          }\r\n\r\n          controller.enqueue(`${promiseJson}\\n\\n`);\r\n        },\r\n      });\r\n\r\n      if (result.pendingIterators.length > 0) {\r\n        for (const gen of result.pendingIterators) {\r\n          pendingIteratorsMap.set(gen.id, gen);\r\n        }\r\n      }\r\n\r\n      const pendingIterators = Array.from(pendingIteratorsMap.values());\r\n\r\n      const resolveIterators = pendingIterators.map(async (iter) => {\r\n        for await (const item of iter) {\r\n          const asyncIteratorOutput = unsafe_writeOutput(\r\n            Tag.AsyncIterator,\r\n            iter.id,\r\n            [item]\r\n          );\r\n\r\n          const genJson = JSON.stringify(asyncIteratorOutput, null, space);\r\n          controller.enqueue(`${genJson}\\n\\n`);\r\n        }\r\n      });\r\n\r\n      await Promise.all(resolveIterators);\r\n      controller.close();\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function internal_serialize(\r\n  value: unknown,\r\n  opts: {\r\n    replacer?: Replacer | null;\r\n    initialID?: number;\r\n    space?: number | string;\r\n  }\r\n) {\r\n  const { replacer, space, initialID = 1 } = opts;\r\n  const writtenValues = new Map<number, unknown>();\r\n  const pendingPromisesMap = new Map<number, TrackingPromise<any>>();\r\n  const pendingIteratorsMap = new Map<number, TrackingAsyncIterable<any>>();\r\n  const output: unknown[] = [];\r\n  let id = initialID;\r\n\r\n  // Get the next id\r\n  const nextId = () => {\r\n    return id++;\r\n  };\r\n\r\n  // Update the references of the written values\r\n  const checkWrittenValues = () => {\r\n    for (const [id, value] of writtenValues) {\r\n      output[id] = value;\r\n    }\r\n  };\r\n\r\n  const context: SerializeContext = {\r\n    output,\r\n    writtenValues,\r\n    pendingPromisesMap,\r\n    pendingIteratorsMap,\r\n    space,\r\n    nextId,\r\n    encodeValue,\r\n    checkWrittenValues,\r\n  };\r\n\r\n  function encodeValue(input: any) {\r\n    // Custom serializer\r\n    if (replacer) {\r\n      const serialized = replacer(input, context);\r\n      if (serialized !== undefined) {\r\n        return serialized;\r\n      }\r\n    }\r\n\r\n    // Default serializer\r\n    switch (typeof input) {\r\n      case \"string\":\r\n        return `$$${input}`;\r\n      case \"boolean\":\r\n        return input;\r\n      case \"number\":\r\n        return serializeNumber(input);\r\n      case \"symbol\":\r\n        return serializeSymbol(input);\r\n      case \"undefined\":\r\n        return \"$undefined\";\r\n      case \"bigint\":\r\n        return serializeBigInt(input);\r\n      case \"object\": {\r\n        if (input === null) {\r\n          return null;\r\n        } else if (input instanceof Date) {\r\n          return serializeDate(input);\r\n        } else if (input instanceof Map) {\r\n          return serializeMap(input, context);\r\n        } else if (input instanceof Set) {\r\n          return serializeSet(input, context);\r\n        } else if (Array.isArray(input)) {\r\n          return serializeArray(input, context);\r\n        } else if (isPlainObject(input)) {\r\n          return serializePlainObject(input, context);\r\n        } else if (input instanceof Promise) {\r\n          return serializePromise(input, context);\r\n        } else if (isAsyncIterable(input)) {\r\n          return serializeAsyncIterable(input, context);\r\n        }\r\n        // Serialize typed arrrays\r\n        else if (input instanceof ArrayBuffer) {\r\n          return serializeArrayBuffer(input, context);\r\n        } else if (input instanceof Int8Array) {\r\n          return serializeTypedArray(Tag.Int8Array, input, context);\r\n        } else if (input instanceof Uint8Array) {\r\n          return serializeTypedArray(Tag.Uint8Array, input, context);\r\n        } else if (input instanceof Uint8ClampedArray) {\r\n          return serializeTypedArray(Tag.Uint8ClampedArray, input, context);\r\n        } else if (input instanceof Int16Array) {\r\n          return serializeTypedArray(Tag.Int16Array, input, context);\r\n        } else if (input instanceof Uint16Array) {\r\n          return serializeTypedArray(Tag.Uint16Array, input, context);\r\n        } else if (input instanceof Int32Array) {\r\n          return serializeTypedArray(Tag.Int32Array, input, context);\r\n        } else if (input instanceof Uint32Array) {\r\n          return serializeTypedArray(Tag.Uint32Array, input, context);\r\n        } else if (input instanceof Float32Array) {\r\n          return serializeTypedArray(Tag.Float32Array, input, context);\r\n        } else if (input instanceof Float64Array) {\r\n          return serializeTypedArray(Tag.Float64Array, input, context);\r\n        } else if (input instanceof BigInt64Array) {\r\n          return serializeTypedArray(Tag.BigInt64Array, input, context);\r\n        } else if (input instanceof BigUint64Array) {\r\n          return serializeTypedArray(Tag.BigUint64Array, input, context);\r\n        } else if (input instanceof DataView) {\r\n          return serializeTypedArray(Tag.DataView, input, context);\r\n        } else {\r\n          throw new Error(\r\n            `Unable to serialize value: ${JSON.stringify(input)}`\r\n          );\r\n        }\r\n      }\r\n      case \"function\": {\r\n        throw new Error(\"Functions cannot be serialized\");\r\n      }\r\n      default:\r\n        throw new Error(\r\n          `Unreachable. Reaching this code should be considered a bug`\r\n        );\r\n    }\r\n  }\r\n\r\n  // The base value contains all the references ids\r\n  const baseValue = encodeValue(value);\r\n  output[0] = baseValue;\r\n\r\n  checkWrittenValues();\r\n\r\n  return {\r\n    output,\r\n    get pendingPromises() {\r\n      return Array.from(pendingPromisesMap.values());\r\n    },\r\n    get pendingIterators() {\r\n      return Array.from(pendingIteratorsMap.values());\r\n    },\r\n  };\r\n}\r\n\r\nfunction serializeNumber(input: number) {\r\n  if (Number.isFinite(input)) {\r\n    if (input === 0 && 1 / input === -Infinity) {\r\n      return serializeTagValue(Tag.NegativeZero);\r\n    } else {\r\n      return input;\r\n    }\r\n  } else {\r\n    if (input === Infinity) {\r\n      return serializeTagValue(Tag.Infinity_);\r\n    } else if (input === -Infinity) {\r\n      return serializeTagValue(Tag.NegativeInfinity);\r\n    } else {\r\n      return serializeTagValue(Tag.NaN_);\r\n    }\r\n  }\r\n}\r\n\r\nfunction serializeSymbol(input: symbol) {\r\n  return serializeTagValue(Tag.Symbol, input.description);\r\n}\r\n\r\nfunction serializeBigInt(input: bigint) {\r\n  return serializeTagValue(Tag.BigInt, String(input));\r\n}\r\n\r\nfunction serializeDate(input: Date) {\r\n  return serializeTagValue(Tag.Date, input.toJSON());\r\n}\r\n\r\nfunction serializeArray(input: Array<any>, context: SerializeContext) {\r\n  const items: unknown[] = [];\r\n\r\n  for (const val of input) {\r\n    items.push(context.encodeValue(val));\r\n  }\r\n\r\n  return items;\r\n}\r\n\r\nfunction serializeSet(input: Set<any>, context: SerializeContext) {\r\n  const { writtenValues: referencesMap } = context;\r\n  const items: unknown[] = [];\r\n\r\n  for (const val of input) {\r\n    items.push(context.encodeValue(val));\r\n  }\r\n\r\n  const id = context.nextId();\r\n  referencesMap.set(id, items);\r\n  return serializeTagValue(Tag.Set, id);\r\n}\r\n\r\nfunction serializeMap(input: Map<any, any>, context: SerializeContext) {\r\n  const { writtenValues: referencesMap } = context;\r\n  const items: [unknown, unknown][] = [];\r\n\r\n  for (const [k, v] of input) {\r\n    const encodedKey = context.encodeValue(k);\r\n    const encodedValue = context.encodeValue(v);\r\n    items.push([encodedKey, encodedValue]);\r\n  }\r\n\r\n  const id = context.nextId();\r\n  referencesMap.set(id, items);\r\n  return serializeTagValue(Tag.Map, id);\r\n}\r\n\r\nfunction serializePlainObject(\r\n  input: Record<string, unknown>,\r\n  context: SerializeContext\r\n) {\r\n  const obj: Record<string, unknown> = {};\r\n\r\n  for (const [key, value] of Object.entries(input)) {\r\n    obj[key] = context.encodeValue(value);\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction serializePromise(input: Promise<any>, context: SerializeContext) {\r\n  const id = context.nextId();\r\n\r\n  // We create a new promise that resolve to the serialized value\r\n  const resolvingPromise = input.then((value) => {\r\n    const ret = context.encodeValue(value);\r\n    context.writtenValues.set(id, ret);\r\n    context.checkWrittenValues(); // Update the values with the new one\r\n    return value;\r\n  });\r\n\r\n  const trackingPromise = trackPromise(id, resolvingPromise);\r\n  context.pendingPromisesMap.set(id, trackingPromise);\r\n  return serializeTagValue(Tag.Promise, id);\r\n}\r\n\r\nfunction serializeArrayBuffer(input: ArrayBuffer, context: SerializeContext) {\r\n  return serializeTypedArray(Tag.ArrayBuffer, new Uint8Array(input), context);\r\n}\r\n\r\nfunction serializeTypedArray(\r\n  tag: Tag,\r\n  input: ArrayBufferView,\r\n  context: SerializeContext\r\n) {\r\n  const id = context.nextId();\r\n  const buffer = bufferToBase64(input.buffer);\r\n  context.writtenValues.set(id, buffer);\r\n  return serializeTagValue(tag, id);\r\n}\r\n\r\nfunction serializeAsyncIterable(\r\n  input: AsyncIterable<unknown>,\r\n  context: SerializeContext\r\n) {\r\n  const id = context.nextId();\r\n\r\n  // We send all the async iterable emited and any nested async iterable values.\r\n  // Flattening the nested iterable would make no sense because we are not returning the exact\r\n  // value was originally stringified. So we could:\r\n  // 1. Throw an error and don't stringify nested async iterables\r\n  // 2. Attempt to stringify nested async iterables which could lead to infinite loops.\r\n  async function* resolveAsyncIterable(\r\n    iter: AsyncIterable<unknown>\r\n  ): AsyncGenerator<unknown> {\r\n    for await (const item of iter) {\r\n      if (isAsyncIterable(item)) {\r\n        // console.warn(\"Avoid returning nested async iterables, prefer using `yield*` instead\")\r\n        yield* resolveAsyncIterable(item);\r\n      } else {\r\n        yield item;\r\n      }\r\n    }\r\n  }\r\n\r\n  const generator = (async function* () {\r\n    for await (const item of resolveAsyncIterable(input)) {\r\n      const ret = context.encodeValue(item);\r\n\r\n      // Push the new generated value\r\n      const items = [...((context.output[id] as any[]) || []), ret];\r\n      context.writtenValues.set(id, items);\r\n      context.checkWrittenValues();\r\n      yield ret;\r\n    }\r\n\r\n    // Notify is done\r\n    const items = [...((context.output[id] as any[]) || []), \"done\"];\r\n    context.writtenValues.set(id, items);\r\n    context.checkWrittenValues();\r\n    yield \"done\";\r\n  })();\r\n\r\n  const tracked = trackAsyncIterable(id, generator);\r\n  context.pendingIteratorsMap.set(id, tracked);\r\n  return serializeTagValue(Tag.AsyncIterator, id);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function serializeTagValue(tag: Tag, value?: number | string) {\r\n  return value ? `$${tag}${value}` : `$${tag}`;\r\n}\r\n\r\nfunction unsafe_writeOutput(tag: Tag, id: number, value: unknown) {\r\n  const output: unknown[] = [serializeTagValue(tag, id)];\r\n  output[id] = value;\r\n  return output;\r\n}\r\n\r\nfunction isAsyncIterable(value: any): value is AsyncIterable<unknown> {\r\n  return value != null && typeof value[Symbol.asyncIterator] === \"function\";\r\n}\r\n"],"mappings":"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","names":["id","value","items"]}