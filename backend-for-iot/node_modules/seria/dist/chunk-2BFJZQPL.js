// src/channel.ts
function createChannel(options) {
  const { id } = options;
  const queue = [];
  const resolveQueue = [];
  let closed = false;
  function send(value) {
    if (closed) {
      throw new Error("Channel was closed");
    }
    const promise = value instanceof Promise ? value : Promise.resolve(value);
    const resolve = resolveQueue.shift();
    if (resolve) {
      resolve(promise);
    } else {
      queue.push(promise);
    }
  }
  async function recv() {
    if (closed && queue.length === 0) {
      return void 0;
    }
    const promise = queue.shift();
    if (promise) {
      return promise;
    }
    return new Promise((resolve) => {
      resolveQueue.push(resolve);
    });
  }
  async function* asyncIterator() {
    while (true) {
      const item = await recv();
      if (item === void 0) {
        break;
      }
      yield item;
    }
  }
  async function next() {
    const value = await recv();
    return { done: closed, value };
  }
  const sender = {
    id,
    send,
    close: () => {
      closed = true;
      const pendingResolve = resolveQueue.splice(0, resolveQueue.length);
      for (const resolve of pendingResolve) {
        resolve(void 0);
      }
    }
  };
  const receiver = {
    id,
    recv,
    next,
    isClosed: () => closed,
    [Symbol.asyncIterator]: asyncIterator
  };
  return [sender, receiver];
}

export {
  createChannel
};
//# sourceMappingURL=chunk-2BFJZQPL.js.map