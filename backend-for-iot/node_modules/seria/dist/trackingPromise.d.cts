declare const TRACKING_PROMISE_SYMBOL: unique symbol;
type PromiseStatus<T> = {
    state: "pending";
} | {
    state: "resolved";
    data: T;
} | {
    state: "rejected";
    error: unknown;
};
type TrackingPromise<T> = Promise<T> & {
    id: number;
    status: PromiseStatus<T>;
    [TRACKING_PROMISE_SYMBOL]: true;
};
declare function trackPromise<T>(id: number, promise: Promise<T>): TrackingPromise<T>;
declare function isTrackingPromise(value: any): value is TrackingPromise<unknown>;
declare function forEachPromise<T = unknown>(promises: TrackingPromise<T>[], callbacks: {
    onResolved: (state: {
        data: T;
        id: number;
    }) => void;
    onRejected?: (state: {
        error: unknown;
        id: number;
    }) => void;
}): Promise<void>;

export { type TrackingPromise, forEachPromise, isTrackingPromise, trackPromise };
